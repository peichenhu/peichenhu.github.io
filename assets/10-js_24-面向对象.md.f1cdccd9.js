import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.03c6a765.js";const A=JSON.parse('{"title":"面向对象","description":"","frontmatter":{},"headers":[],"relativePath":"10-js/24-面向对象.md","filePath":"10-js/24-面向对象.md","lastUpdated":1703663478000}'),p={name:"10-js/24-面向对象.md"},o=l(`<h1 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h1><p>面向对象（Object-Oriented）是一种程序设计的范式，它以对象为基本单位，通过封装、继承和多态等机制来组织和管理代码。核心思想是将现实世界中的事物抽象成对象，对象之间通过消息传递进行交互。每个对象都有自己的状态（数据）和行为（方法），对象之间可以通过方法调用来进行信息交换。这种方式使得程序的设计更加模块化和可维护，能够更好地应对复杂性。</p><p><code>JS-OOP</code> 是将相同的事物抽象成<code>类</code>, 每个事物都是类的实例化后的<code>对象</code>，通过<code>封装</code>、<code>继承</code>和<code>多态</code>等机制来组织和管理代码，提高软件的重用性、灵活性和扩展性等目的。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 标准的 OOP 需要具备封装、继承、多态能力</span></span>
<span class="line"><span style="color:#6A737D;"> * 封装：JS 可以通过 &quot;function 函数作用域&quot; 实现</span></span>
<span class="line"><span style="color:#6A737D;"> * 继承：JS 可以通过 &quot;this 作用域链&quot; 、 &quot;prototype 原型链&quot; 实现</span></span>
<span class="line"><span style="color:#6A737D;"> * 多态：JS 可以通过 &quot;属性重写/属性拓展&quot;、&quot;方法重写/方法拓展&quot; 实现</span></span>
<span class="line"><span style="color:#6A737D;"> * ====</span></span>
<span class="line"><span style="color:#6A737D;"> * 私有成员：只能在类内部访问</span></span>
<span class="line"><span style="color:#6A737D;"> * 公有成员：类可以访问，实例对象通过继承可以访问，内部外部不受限制</span></span>
<span class="line"><span style="color:#6A737D;"> * 静态成员：只有类可以访问，内部外部不受限制</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ===== &quot;仿 Class&quot; 模式 =====</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AnimalClass</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">language</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 函数作用域封装属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;私有名字&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 私有属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> language </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;私有语言&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 私有属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> say </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*私有方法*/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;私有方式：动物 %s 说 %s&quot;</span><span style="color:#E1E4E8;">, username, language);</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> username; </span><span style="color:#6A737D;">// 公有属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.language </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> language; </span><span style="color:#6A737D;">// 公有属性</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">AnimalClass</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.say </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*公有方法*/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;动物 %s 说 %s&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.username, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.language);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#79B8FF;">AnimalClass</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.skill </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*公有方法*/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%s 可以上树&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.username);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">AnimalClass.username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;原始动物&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 静态方法</span></span>
<span class="line"><span style="color:#E1E4E8;">AnimalClass.say </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*静态方法*/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;我是一个 %s&quot;</span><span style="color:#E1E4E8;">, AnimalClass.username);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AnimalClass</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;猫&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;喵喵喵&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;仿 Class&quot; 实例化对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AnimalClass</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;狗&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;汪汪汪&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;仿 Class&quot; 实例化对象</span></span>
<span class="line"><span style="color:#E1E4E8;">dog.skill </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*方法重写创建多态*/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%s 不可以上树&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.username);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">cat.</span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 继承 say 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">dog.</span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 继承 say 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">cat.</span><span style="color:#B392F0;">skill</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 多态 skill 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">dog.</span><span style="color:#B392F0;">skill</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 多态 skill 方法</span></span>
<span class="line"><span style="color:#6A737D;">// 类和实例都有自己的属性和方法</span></span>
<span class="line"><span style="color:#E1E4E8;">AnimalClass.</span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ===== class 模式 =====</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AnimalClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">#username</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;私有名字&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 私有属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">#language</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;私有语言&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 私有属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*私有方法*/</span><span style="color:#E1E4E8;"> #</span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;私有方式：动物 %s 说 %s&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.#username, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.#language);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*执行私有方法*/</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">privateSay</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">#say</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 构造函数*/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">language</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> username; </span><span style="color:#6A737D;">// 公有属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.language </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> language; </span><span style="color:#6A737D;">// 公有属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*公有方法*/</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;动物 %s 说 %s&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.username, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.language);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*公有方法*/</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">skill</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%s 可以上树&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.username);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*静态属性*/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;原始动物&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*静态方法*/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;我是一个 %s&quot;</span><span style="color:#E1E4E8;">, AnimalClass.username);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AnimalClass</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;猫&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;喵喵喵&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// Class 实例化对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AnimalClass</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;狗&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;汪汪汪&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// Class 实例化对象</span></span>
<span class="line"><span style="color:#E1E4E8;">dog.skill </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*方法重写创建多态*/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%s 不可以上树&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.username);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">cat.</span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 继承 say 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">dog.</span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 继承 say 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">cat.</span><span style="color:#B392F0;">skill</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 多态 skill 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">dog.</span><span style="color:#B392F0;">skill</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 多态 skill 方法</span></span>
<span class="line"><span style="color:#6A737D;">// 类和实例都有自己的属性和方法</span></span>
<span class="line"><span style="color:#E1E4E8;">AnimalClass.</span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ===== 子类 extends =====</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AnimalClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// constructor 可选，在派生类中选了就必须 super() 或者 返回一个对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">race</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// super 之前没有 this</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// super 只属于派生类</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// super 不能单独使用，只能 super() 或者 super.parentStaticeFunc()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;狗&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;汪汪汪&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 等同于 super.constructor(), 调用父类的构造函数，将返回的实例赋值给 this</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dogRace </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> race; </span><span style="color:#6A737D;">// 狗的品种</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dog_husky</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;哈士奇&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(dog_husky);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 标准的 OOP 需要具备封装、继承、多态能力</span></span>
<span class="line"><span style="color:#6A737D;"> * 封装：JS 可以通过 &quot;function 函数作用域&quot; 实现</span></span>
<span class="line"><span style="color:#6A737D;"> * 继承：JS 可以通过 &quot;this 作用域链&quot; 、 &quot;prototype 原型链&quot; 实现</span></span>
<span class="line"><span style="color:#6A737D;"> * 多态：JS 可以通过 &quot;属性重写/属性拓展&quot;、&quot;方法重写/方法拓展&quot; 实现</span></span>
<span class="line"><span style="color:#6A737D;"> * ====</span></span>
<span class="line"><span style="color:#6A737D;"> * 私有成员：只能在类内部访问</span></span>
<span class="line"><span style="color:#6A737D;"> * 公有成员：类可以访问，实例对象通过继承可以访问，内部外部不受限制</span></span>
<span class="line"><span style="color:#6A737D;"> * 静态成员：只有类可以访问，内部外部不受限制</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ===== &quot;仿 Class&quot; 模式 =====</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnimalClass</span><span style="color:#24292E;">(</span><span style="color:#E36209;">username</span><span style="color:#24292E;">, </span><span style="color:#E36209;">language</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 函数作用域封装属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;私有名字&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 私有属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> language </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;私有语言&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 私有属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> say </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*私有方法*/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;私有方式：动物 %s 说 %s&quot;</span><span style="color:#24292E;">, username, language);</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> username; </span><span style="color:#6A737D;">// 公有属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.language </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> language; </span><span style="color:#6A737D;">// 公有属性</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">AnimalClass</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.say </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*公有方法*/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;动物 %s 说 %s&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.username, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.language);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#005CC5;">AnimalClass</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.skill </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*公有方法*/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%s 可以上树&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.username);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">AnimalClass.username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;原始动物&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 静态方法</span></span>
<span class="line"><span style="color:#24292E;">AnimalClass.say </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*静态方法*/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我是一个 %s&quot;</span><span style="color:#24292E;">, AnimalClass.username);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnimalClass</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;猫&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;喵喵喵&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;仿 Class&quot; 实例化对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnimalClass</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狗&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;汪汪汪&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;仿 Class&quot; 实例化对象</span></span>
<span class="line"><span style="color:#24292E;">dog.skill </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*方法重写创建多态*/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%s 不可以上树&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.username);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">cat.</span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 继承 say 方法</span></span>
<span class="line"><span style="color:#24292E;">dog.</span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 继承 say 方法</span></span>
<span class="line"><span style="color:#24292E;">cat.</span><span style="color:#6F42C1;">skill</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 多态 skill 方法</span></span>
<span class="line"><span style="color:#24292E;">dog.</span><span style="color:#6F42C1;">skill</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 多态 skill 方法</span></span>
<span class="line"><span style="color:#6A737D;">// 类和实例都有自己的属性和方法</span></span>
<span class="line"><span style="color:#24292E;">AnimalClass.</span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ===== class 模式 =====</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnimalClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">#username</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;私有名字&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 私有属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">#language</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;私有语言&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 私有属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*私有方法*/</span><span style="color:#24292E;"> #</span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;私有方式：动物 %s 说 %s&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.#username, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.#language);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*执行私有方法*/</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">privateSay</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">#say</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 构造函数*/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">username</span><span style="color:#24292E;">, </span><span style="color:#E36209;">language</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> username; </span><span style="color:#6A737D;">// 公有属性</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.language </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> language; </span><span style="color:#6A737D;">// 公有属性</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*公有方法*/</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;动物 %s 说 %s&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.username, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.language);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*公有方法*/</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">skill</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%s 可以上树&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.username);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*静态属性*/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#E36209;">username</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;原始动物&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*静态方法*/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我是一个 %s&quot;</span><span style="color:#24292E;">, AnimalClass.username);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnimalClass</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;猫&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;喵喵喵&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Class 实例化对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnimalClass</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狗&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;汪汪汪&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Class 实例化对象</span></span>
<span class="line"><span style="color:#24292E;">dog.skill </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*方法重写创建多态*/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%s 不可以上树&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.username);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">cat.</span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 继承 say 方法</span></span>
<span class="line"><span style="color:#24292E;">dog.</span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 继承 say 方法</span></span>
<span class="line"><span style="color:#24292E;">cat.</span><span style="color:#6F42C1;">skill</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 多态 skill 方法</span></span>
<span class="line"><span style="color:#24292E;">dog.</span><span style="color:#6F42C1;">skill</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 多态 skill 方法</span></span>
<span class="line"><span style="color:#6A737D;">// 类和实例都有自己的属性和方法</span></span>
<span class="line"><span style="color:#24292E;">AnimalClass.</span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ===== 子类 extends =====</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnimalClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// constructor 可选，在派生类中选了就必须 super() 或者 返回一个对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">race</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// super 之前没有 this</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// super 只属于派生类</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// super 不能单独使用，只能 super() 或者 super.parentStaticeFunc()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狗&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;汪汪汪&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 等同于 super.constructor(), 调用父类的构造函数，将返回的实例赋值给 this</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.dogRace </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> race; </span><span style="color:#6A737D;">// 狗的品种</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dog_husky</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;哈士奇&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(dog_husky);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br></div></div>`,4),e=[o];function c(t,r,E,y,i,u){return a(),n("div",null,e)}const b=s(p,[["render",c]]);export{A as __pageData,b as default};
