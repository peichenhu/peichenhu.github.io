import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.03c6a765.js";const g=JSON.parse('{"title":"反射","description":"","frontmatter":{},"headers":[],"relativePath":"10-js/40-反射.md","filePath":"10-js/40-反射.md","lastUpdated":1703663478000}'),p={name:"10-js/40-反射.md"},e=l(`<h1 id="反射" tabindex="-1">反射 <a class="header-anchor" href="#反射" aria-label="Permalink to &quot;反射&quot;">​</a></h1><h2 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">Proxy</a> 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">target</span><span style="color:#6A737D;"> 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{object}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">handler</span><span style="color:#6A737D;"> 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为。</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*}</span><span style="color:#6A737D;"> Proxy 包装的目标对象</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Proxy</span><span style="color:#E1E4E8;">(target, handler);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">target</span><span style="color:#6A737D;"> 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{object}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">handler</span><span style="color:#6A737D;"> 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为。</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*}</span><span style="color:#6A737D;"> Proxy 包装的目标对象</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Proxy</span><span style="color:#24292E;">(target, handler);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 示例</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">prop</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">receiver</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">val</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Reflect.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;访问属性: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> prop);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 嵌套对象递归代理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;object&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Proxy</span><span style="color:#E1E4E8;">(val, handler) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> val;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// has: function (target, prop) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// set: function(target, property, value, receiver) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// apply: function (target, thisArg, argumentsList) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// construct: function (target, argumentsList, newTarget) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// defineProperty: function (target, property, descriptor) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// deleteProperty: function (target, property) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// getOwnPropertyDescriptor: function (target, prop) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// setPrototypeOf: function (target, prototype) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// getPrototypeOf(target) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// isExtensible: function (target) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ownKeys: function (target) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// preventExtensions: function (target) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Proxy</span><span style="color:#E1E4E8;">(target, handler);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p.a); </span><span style="color:#6A737D;">// &quot;called: a&quot;; ouptut 10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 示例</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">prop</span><span style="color:#24292E;">, </span><span style="color:#E36209;">receiver</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">val</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Reflect.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;访问属性: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> prop);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 嵌套对象递归代理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;object&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Proxy</span><span style="color:#24292E;">(val, handler) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> val;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// has: function (target, prop) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// set: function(target, property, value, receiver) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// apply: function (target, thisArg, argumentsList) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// construct: function (target, argumentsList, newTarget) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// defineProperty: function (target, property, descriptor) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// deleteProperty: function (target, property) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// getOwnPropertyDescriptor: function (target, prop) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// setPrototypeOf: function (target, prototype) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// getPrototypeOf(target) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// isExtensible: function (target) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ownKeys: function (target) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// preventExtensions: function (target) {},</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Proxy</span><span style="color:#24292E;">(target, handler);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p.a); </span><span style="color:#6A737D;">// &quot;called: a&quot;; ouptut 10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="reflect" tabindex="-1">Reflect <a class="header-anchor" href="#reflect" aria-label="Permalink to &quot;Reflect&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" target="_blank" rel="noreferrer">Reflect</a> 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与 proxy handler 的方法相同。Reflect 不是一个函数对象，因此它是不可构造的。Reflect 的所有属性和方法都是静态的（就像 Math 对象）。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 示例</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">duck</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;Maurice&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    color: </span><span style="color:#9ECBFF;">&quot;white&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">greeting</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Quaaaack! My name is \${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">Reflect.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(duck, </span><span style="color:#9ECBFF;">&quot;color&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Reflect.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(duck, </span><span style="color:#9ECBFF;">&quot;haircut&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Reflect.</span><span style="color:#B392F0;">ownKeys</span><span style="color:#E1E4E8;">(duck); </span><span style="color:#6A737D;">// [ &quot;name&quot;, &quot;color&quot;, &quot;greeting&quot; ]</span></span>
<span class="line"><span style="color:#E1E4E8;">Reflect.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(duck, </span><span style="color:#9ECBFF;">&quot;eyes&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;black&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 其他方法</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.apply(target, thisArgument, argumentsList)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.construct(target, argumentsList[, newTarget])</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.defineProperty(target, propertyKey, attributes)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.deleteProperty(target, propertyKey)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.get(target, propertyKey[, receiver])</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.getOwnPropertyDescriptor(target, propertyKey)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.getPrototypeOf(target)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.has(target, propertyKey)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.isExtensible(target)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.ownKeys(target)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.preventExtensions(target)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.set(target, propertyKey, value[, receiver])</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.setPrototypeOf(target, prototype)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 示例</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">duck</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;Maurice&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    color: </span><span style="color:#032F62;">&quot;white&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">greeting</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Quaaaack! My name is \${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">Reflect.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(duck, </span><span style="color:#032F62;">&quot;color&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Reflect.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(duck, </span><span style="color:#032F62;">&quot;haircut&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Reflect.</span><span style="color:#6F42C1;">ownKeys</span><span style="color:#24292E;">(duck); </span><span style="color:#6A737D;">// [ &quot;name&quot;, &quot;color&quot;, &quot;greeting&quot; ]</span></span>
<span class="line"><span style="color:#24292E;">Reflect.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(duck, </span><span style="color:#032F62;">&quot;eyes&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;black&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 其他方法</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.apply(target, thisArgument, argumentsList)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.construct(target, argumentsList[, newTarget])</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.defineProperty(target, propertyKey, attributes)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.deleteProperty(target, propertyKey)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.get(target, propertyKey[, receiver])</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.getOwnPropertyDescriptor(target, propertyKey)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.getPrototypeOf(target)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.has(target, propertyKey)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.isExtensible(target)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.ownKeys(target)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.preventExtensions(target)</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.set(target, propertyKey, value[, receiver])</span></span>
<span class="line"><span style="color:#6A737D;">// Reflect.setPrototypeOf(target, prototype)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>`,10),o=[e];function t(r,c,y,E,i,u){return a(),n("div",null,o)}const A=s(p,[["render",t]]);export{g as __pageData,A as default};
