import{_ as s,c as a,o as l,Q as e}from"./chunks/framework.03c6a765.js";const A=JSON.parse('{"title":"克隆","description":"","frontmatter":{},"headers":[],"relativePath":"10-js/50-克隆.md","filePath":"10-js/50-克隆.md","lastUpdated":1703663478000}'),n={name:"10-js/50-克隆.md"},r=e(`<h1 id="克隆" tabindex="-1">克隆 <a class="header-anchor" href="#克隆" aria-label="Permalink to &quot;克隆&quot;">​</a></h1><h2 id="结构化克隆" tabindex="-1">结构化克隆 <a class="header-anchor" href="#结构化克隆" aria-label="Permalink to &quot;结构化克隆&quot;">​</a></h2><p>全局的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/structuredClone" target="_blank" rel="noreferrer">structuredClone()</a> 方法使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Structured_clone_algorithm" target="_blank" rel="noreferrer">结构化克隆算法</a>将给定的值进行深拷贝。</p><p>该方法还支持把原始值中的可转移对象转移到新对象，而不是把属性引用拷贝过去。 可转移对象与原始对象分离并附加到新对象；它们不可以在原始对象中访问被访问到。</p><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">value</span><span style="color:#6A737D;"> 被克隆的对象。可以是任何结构化克隆支持的类型。</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*[]}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">transfer</span><span style="color:#6A737D;"> 是一个可转移对象的数组，里面的 值 并没有被克隆，而是被转移到被拷贝对象上。</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*}</span><span style="color:#6A737D;"> 返回值是原始值的深拷贝。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#B392F0;">structuredClone</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#B392F0;">structuredClone</span><span style="color:#E1E4E8;">(value, { transfer });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">value</span><span style="color:#6A737D;"> 被克隆的对象。可以是任何结构化克隆支持的类型。</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*[]}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">transfer</span><span style="color:#6A737D;"> 是一个可转移对象的数组，里面的 值 并没有被克隆，而是被转移到被拷贝对象上。</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*}</span><span style="color:#6A737D;"> 返回值是原始值的深拷贝。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6F42C1;">structuredClone</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#6F42C1;">structuredClone</span><span style="color:#24292E;">(value, { transfer });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="结构化克隆不支持哪些" tabindex="-1">结构化克隆不支持哪些？ <a class="header-anchor" href="#结构化克隆不支持哪些" aria-label="Permalink to &quot;结构化克隆不支持哪些？&quot;">​</a></h2><ul><li><code>Function</code> 对象是不能被结构化克隆算法复制的；如果你尝试这样子去做，这会导致抛出 DATA_CLONE_ERR 的异常。</li><li>企图去克隆 <code>DOM</code> 节点同样会抛出 DATA_CLONE_ERR 异常。</li><li>对象的某些特定参数也不会被保留 <ul><li><code>RegExp</code> 对象的 <code>lastIndex</code> 字段不会被保留</li><li><code>属性描述符</code>、<code>setters</code> 以及 <code>getters</code>（以及其他类似元数据的功能）同样不会被复制。例如，如果一个对象用属性描述符标记为 read-only，它将会被复制为 read-write，因为这是默认的情况下。</li><li><code>原形链上的属性</code>也不会被追踪以及复制。</li></ul></li></ul><h2 id="结构化克隆能支持哪些" tabindex="-1">结构化克隆能支持哪些？ <a class="header-anchor" href="#结构化克隆能支持哪些" aria-label="Permalink to &quot;结构化克隆能支持哪些？&quot;">​</a></h2><ul><li>Array</li><li>ArrayBuffer</li><li>Boolean</li><li>DataView</li><li>Date</li><li>Error 类型（仅限部分 Error 类型）。</li><li>Map</li><li>Object 对象：仅限简单对象（如使用对象字面量创建的）。</li><li>除 symbol 以外的基本类型。</li><li>RegExp：lastIndex 字段不会被保留。</li><li>Set</li><li>String</li><li>TypedArray</li></ul><h2 id="手写克隆" tabindex="-1">手写克隆 <a class="header-anchor" href="#手写克隆" aria-label="Permalink to &quot;手写克隆&quot;">​</a></h2><ul><li><a href="https://github.com/ungap/structured-clone/tree/main" target="_blank" rel="noreferrer">structured-clone-polyfill</a></li><li><a href="../../app/app-deep-clone/index.js">pch1024-deep-clone</a></li></ul>`,12),o=[r];function p(t,c,i,d,u,y){return l(),a("div",null,o)}const _=s(n,[["render",p]]);export{A as __pageData,_ as default};
