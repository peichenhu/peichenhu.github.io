import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.03c6a765.js";const F=JSON.parse('{"title":"RegExp","description":"","frontmatter":{},"headers":[],"relativePath":"10-js/90-正则.md","filePath":"10-js/90-正则.md","lastUpdated":1703663478000}'),o={name:"10-js/90-正则.md"},e=l(`<h1 id="regexp" tabindex="-1">RegExp <a class="header-anchor" href="#regexp" aria-label="Permalink to &quot;RegExp&quot;">​</a></h1><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// var patt = new RegExp(pattern, modifiers);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> re </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w+&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// var patt = /pattern/modifiers;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> re </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\w</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// var patt = new RegExp(pattern, modifiers);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> re </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w+&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// var patt = /pattern/modifiers;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> re </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="修饰符" tabindex="-1">修饰符 <a class="header-anchor" href="#修饰符" aria-label="Permalink to &quot;修饰符&quot;">​</a></h2><ul><li><code>i</code> 执行对大小写不敏感的匹配。</li><li><code>g</code> 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</li><li><code>m</code> 执行多行匹配。</li></ul><h2 id="方括号" tabindex="-1">方括号 <a class="header-anchor" href="#方括号" aria-label="Permalink to &quot;方括号&quot;">​</a></h2><ul><li><code>[abc]</code> 查找方括号之间的任何字符。</li><li><code>[^abc]</code> 查找任何不在方括号之间的字符。</li><li><code>[0-9]</code> 查找任何从 0 至 9 的数字。</li><li><code>[a-z]</code> 查找任何从小写 a 到小写 z 的字符。</li><li><code>[A-Z]</code> 查找任何从大写 A 到大写 Z 的字符。</li><li><code>[A-z]</code> 查找任何从大写 A 到小写 z 的字符。</li><li><code>[adgk]</code> 查找给定集合内的任何字符。</li><li><code>[^adgk]</code> 查找给定集合外的任何字符。</li><li><code>(red|blue|green)</code> 查找任何指定的选项。</li></ul><h2 id="元字符" tabindex="-1">元字符 <a class="header-anchor" href="#元字符" aria-label="Permalink to &quot;元字符&quot;">​</a></h2><ul><li><code>.</code> 查找单个字符，除了换行和行结束符。</li><li><code>\\w</code> 查找数字、字母及下划线。</li><li><code>\\W</code> 查找非单词字符。</li><li><code>\\d</code> 查找数字。</li><li><code>\\D</code> 查找非数字字符。</li><li><code>\\s</code> 查找空白字符。</li><li><code>\\S</code> 查找非空白字符。</li><li><code>\\b</code> 匹配单词边界。</li><li><code>\\B</code> 匹配非单词边界。</li><li><code>\\0</code> 查找 NULL 字符。</li><li><code>\\n</code> 查找换行符。</li><li><code>\\f</code> 查找换页符。</li><li><code>\\r</code> 查找回车符。</li><li><code>\\t</code> 查找制表符。</li><li><code>\\v</code> 查找垂直制表符。</li><li><code>\\xxx</code> 查找以八进制数 xxx 规定的字符。</li><li><code>\\xdd</code> 查找以十六进制数 dd 规定的字符。</li><li><code>\\uxxxx</code> 查找以十六进制数 xxxx 规定的 Unicode 字符。</li></ul><h2 id="量词" tabindex="-1">量词 <a class="header-anchor" href="#量词" aria-label="Permalink to &quot;量词&quot;">​</a></h2><ul><li><code>n+</code> 匹配任何包含至少一个 n 的字符串。</li><li><code>n*</code> 匹配任何包含零个或多个 n 的字符串。</li><li><code>n?</code> 匹配任何包含零个或一个 n 的字符串。</li><li><code>n{X}</code> 匹配包含 X 个 n 的序列的字符串。</li><li><code>n{X,}</code> X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。</li><li><code>n{X,Y}</code> X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。</li><li><code>n$</code> 匹配任何结尾为 n 的字符串。</li><li><code>^n</code> 匹配任何开头为 n 的字符串。</li><li><code>?=n</code> 匹配任何其后紧接指定字符串 n 的字符串。</li><li><code>?!n</code> 匹配任何其后没有紧接指定字符串 n 的字符</li></ul><h2 id="regexp-对象方法" tabindex="-1">RegExp 对象方法 <a class="header-anchor" href="#regexp-对象方法" aria-label="Permalink to &quot;RegExp 对象方法&quot;">​</a></h2><ul><li><code>exec</code> 检索字符串中指定的值。返回找到的值，并确定其位置。</li><li><code>test</code> 检索字符串中指定的值。返回 true 或 false。</li><li><code>toString</code> 返回正则表达式的字符串。</li></ul><h2 id="支持正则表达式的-string-对象的方法" tabindex="-1">支持正则表达式的 String 对象的方法 <a class="header-anchor" href="#支持正则表达式的-string-对象的方法" aria-label="Permalink to &quot;支持正则表达式的 String 对象的方法&quot;">​</a></h2><ul><li><code>search</code> 检索与正则表达式相匹配的值。</li><li><code>split</code> 把字符串分割为字符串数组。</li><li><code>match(regexp)</code> 检索字符串与正则表达式进行匹配的结果。 <ul><li><code>regexp</code> 一个正则表达式对象或者任何具有 Symbol.match 方法的对象。</li><li><code>返回值</code> 一个 Array，其内容取决于是否存在全局（g）标志，如果没有匹配，则返回 null。</li></ul></li><li><code>replace(pattern, replacement)</code> 返回一个新字符串，其中一个、多个或所有匹配的 pattern 被替换为 replacement。 <ul><li><code>pattern</code> 可以是字符串或者一个带有 Symbol.replace 方法的对象，</li><li><code>replacement</code> 可以是字符串或函数。</li><li><code>返回值</code> 一个新的字符串，其中一个、多个或所有的匹配项都被指定的替换项替换。</li></ul></li><li><code>matchAll(regexp)</code> 返回一个迭代器，该迭代器包含了检索字符串与正则表达式进行匹配的所有结果（包括捕获组）。 <ul><li>同 match，但 <code>regexp</code> 必须 b 含全局<code>g</code>标志</li></ul></li><li><code>replaceAll(pattern, replacement)</code> 返回一个新字符串，所有匹配 pattern 的部分都被替换为 replacement。 <ul><li>同 replace <code>pattern</code> 若为正则对象则必须含全局<code>g</code>标志</li></ul></li></ul><h2 id="捕获组" tabindex="-1">捕获组 <a class="header-anchor" href="#捕获组" aria-label="Permalink to &quot;捕获组&quot;">​</a></h2><blockquote><p><code>(x)</code> 捕获组：匹配 x 并记住匹配项。</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;Textfoo,asdasdafoo,foo&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(foo)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 失败捕获组, 正常全局匹配</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：[&#39;foo&#39;, &#39;foo&#39;, &#39;foo&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;Textfoo,asdasdafoo,foo&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(foo)</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 单个捕获组 [match#1, group#1]</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：[&#39;foo&#39;, &#39;foo&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;3[a]2[bc]&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">[</span><span style="color:#F97583;">^</span><span style="color:#85E89D;font-weight:bold;">\\[\\]</span><span style="color:#79B8FF;">]</span><span style="color:#DBEDFF;">)</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 单个捕获组</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：[&#39;[a]&#39;, &#39;a&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;3[a]2[bc]&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">[</span><span style="color:#F97583;">^</span><span style="color:#85E89D;font-weight:bold;">\\[\\]</span><span style="color:#79B8FF;">]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 失败捕获组, 正常全局匹配</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：[&#39;[a]&#39;, &#39;[bc]&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">...</span><span style="color:#9ECBFF;">&quot;3[a]2[bc]&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">matchAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">[</span><span style="color:#F97583;">^</span><span style="color:#85E89D;font-weight:bold;">\\[\\]</span><span style="color:#79B8FF;">]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)]; </span><span style="color:#6A737D;">// 全部捕获组</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：[[&quot;[a]&quot;,&quot;a&quot;],[&quot;[bc]&quot;,&quot;bc&quot;]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;Textfoo,asdasdafoo,foo&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(foo)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 失败捕获组, 正常全局匹配</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：[&#39;foo&#39;, &#39;foo&#39;, &#39;foo&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;Textfoo,asdasdafoo,foo&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(foo)/</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 单个捕获组 [match#1, group#1]</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：[&#39;foo&#39;, &#39;foo&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;3[a]2[bc]&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\[</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#22863A;font-weight:bold;">\\[\\]</span><span style="color:#005CC5;">]</span><span style="color:#032F62;">)</span><span style="color:#22863A;font-weight:bold;">\\]</span><span style="color:#032F62;">/</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 单个捕获组</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：[&#39;[a]&#39;, &#39;a&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;3[a]2[bc]&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\[</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#22863A;font-weight:bold;">\\[\\]</span><span style="color:#005CC5;">]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)</span><span style="color:#22863A;font-weight:bold;">\\]</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 失败捕获组, 正常全局匹配</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：[&#39;[a]&#39;, &#39;[bc]&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">...</span><span style="color:#032F62;">&quot;3[a]2[bc]&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matchAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\[</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#22863A;font-weight:bold;">\\[\\]</span><span style="color:#005CC5;">]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)</span><span style="color:#22863A;font-weight:bold;">\\]</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)]; </span><span style="color:#6A737D;">// 全部捕获组</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：[[&quot;[a]&quot;,&quot;a&quot;],[&quot;[bc]&quot;,&quot;bc&quot;]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="使用命名捕获组" tabindex="-1">使用命名捕获组 <a class="header-anchor" href="#使用命名捕获组" aria-label="Permalink to &quot;使用命名捕获组&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">paragraph</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;The quick brown fox jumps over the lazy dog. It barked.&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">capturingRegex</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;</span><span style="color:#E1E4E8;">animal</span><span style="color:#DBEDFF;">&gt;fox</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">cat) jumps over</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">found</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> paragraph.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(capturingRegex);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(found.groups); </span><span style="color:#6A737D;">// {animal: &quot;fox&quot;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">paragraph</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;The quick brown fox jumps over the lazy dog. It barked.&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">capturingRegex</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /(?&lt;</span><span style="color:#24292E;">animal</span><span style="color:#032F62;">&gt;fox</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">cat) jumps over/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">found</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paragraph.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(capturingRegex);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(found.groups); </span><span style="color:#6A737D;">// {animal: &quot;fox&quot;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://www.runoob.com/jsref/jsref-obj-regexp.html" target="_blank" rel="noreferrer">菜鸟 JS RegExp 对象</a></li><li><a href="https://regexr.com/" target="_blank" rel="noreferrer">regexr</a></li></ul>`,22),p=[e];function c(t,r,i,y,d,E){return n(),a("div",null,p)}const b=s(o,[["render",c]]);export{F as __pageData,b as default};
