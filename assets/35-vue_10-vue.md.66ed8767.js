import{_ as e,c as a,o as s,Q as l}from"./chunks/framework.03c6a765.js";const E=JSON.parse('{"title":"Vue","description":"","frontmatter":{},"headers":[],"relativePath":"35-vue/10-vue.md","filePath":"35-vue/10-vue.md","lastUpdated":1703663478000}'),o={name:"35-vue/10-vue.md"},n=l(`<h1 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h1><h2 id="vuetemplate-和响应式数据的绑定关系" tabindex="-1">VueTemplate 和响应式数据的绑定关系 <a class="header-anchor" href="#vuetemplate-和响应式数据的绑定关系" aria-label="Permalink to &quot;VueTemplate 和响应式数据的绑定关系&quot;">​</a></h2><p><code>VueTemplate</code> 编译过程中使用 <code>with</code> 语句，尽管在 JS 中通常不建议使用它。<br> 这是因为 <code>with</code> 语句可以简化模板编译过程，使得模板的作用域与 <code>with</code> 的作用域正好契合。<br></p><p><code>VueTemplate</code> 可以在构建时预编译为渲染函数，这样在运行时就不需要使用 <code>with</code> 语句。<br> 预编译可以通过像 <code>vue-loader</code> 这样的工具来实现。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 使用 new Function(&#39;scope&#39;) + with(scope){} + call(this) 转换代码块的上下文和作用域。</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> expression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;this.text + text&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> render </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;scope&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">\`with(scope) { return \${</span><span style="color:#E1E4E8;">expression</span><span style="color:#9ECBFF;">}; }\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { text: </span><span style="color:#9ECBFF;">&#39;我是 Vue this 的数据；&#39;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { text: </span><span style="color:#9ECBFF;">&#39;我是 Vue data 的响应式数据；&#39;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> render.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(vm, data);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res);</span></span>
<span class="line"><span style="color:#6A737D;">// 我是 Vue this 的数据；我是 Vue data 的响应式数据；</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用 new Function(&#39;scope&#39;) + with(scope){} + call(this) 转换代码块的上下文和作用域。</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> expression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;this.text + text&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> render </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;scope&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">\`with(scope) { return \${</span><span style="color:#24292E;">expression</span><span style="color:#032F62;">}; }\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { text: </span><span style="color:#032F62;">&#39;我是 Vue this 的数据；&#39;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { text: </span><span style="color:#032F62;">&#39;我是 Vue data 的响应式数据；&#39;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> render.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(vm, data);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#6A737D;">// 我是 Vue this 的数据；我是 Vue data 的响应式数据；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="vue2-响应式原理" tabindex="-1">Vue2 响应式原理 <a class="header-anchor" href="#vue2-响应式原理" aria-label="Permalink to &quot;Vue2 响应式原理&quot;">​</a></h2><p>Vue 通过 <code>Object.definedProperty</code> 对 data 上的属性重新定义，转为 getter/setter, 当使用对应的属性时进行依赖收集和创建 Watcher，如果属性发生了变化，就通知对应的依赖模块进行更新操作。</p><p>Vue 的数据双向绑定整合了 Observer，Compile 和 Watcher 三者，</p><ul><li>通过 Observer 观测数据变化</li><li>通过 Compile 解析编译模板</li><li>通过 Watcher 负责 Observer 和 Compile 之间的通信，达到<code>数据变化-&gt;视图更新</code>，<code>视图交互变化-&gt;数据变更</code>的双向绑定效果。</li></ul><h2 id="v-model-指令双向绑定的原理" tabindex="-1">v-model 指令双向绑定的原理？ <a class="header-anchor" href="#v-model-指令双向绑定的原理" aria-label="Permalink to &quot;v-model 指令双向绑定的原理？&quot;">​</a></h2><p>它是一个语法糖，等效于使用 :value 和 @input 事件的组合。</p><p>v-model 的工作原理可以分为以下步骤：</p><ol><li>首先，Vue 创建一个代理对象，其中包含了数据属性，例如 message。</li><li>初始时，表单元素的值会被设置为数据属性的当前值。</li><li>当用户输入文本时，@input 事件被触发，Vue 捕获用户输入的值，通常通过 $event 参数。</li><li>Vue 然后将捕获到的值更新到数据属性。</li><li>由于双向数据绑定的机制，数据属性的值的变化会自动反映到表单元素的值，实现了双向同步。</li></ol><p>text 和 textarea 元素使用 value 属性和 input 事件 checkbox 和 radio 使用 checked 属性和 change 事件 select 字段将 value 作为 prop 并将 change 作为事件</p><h2 id="vue3-响应式数据" tabindex="-1">Vue3 响应式数据 <a class="header-anchor" href="#vue3-响应式数据" aria-label="Permalink to &quot;Vue3 响应式数据&quot;">​</a></h2><h3 id="为什么使用-proxy" tabindex="-1">为什么使用 Proxy ？ <a class="header-anchor" href="#为什么使用-proxy" aria-label="Permalink to &quot;为什么使用 Proxy ？&quot;">​</a></h3><ul><li><code>Object.defineProperty</code> 无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应</li><li><code>Object.defineProperty</code> 只能劫持对象的属性，从而需要对每个对象，每个属性进行遍历，如果属性值是对象，还需要深度遍历。<code>Proxy</code> 可以劫持整个对象，并返回一个新的对象。</li><li><code>Proxy</code> 不仅可以代理对象，还可以代理数组。还可以代理动态增加的属性。</li><li><code>Proxy</code> 有多达 13 种拦截方法</li><li><code>Proxy</code> 作为新标准将受到浏览器厂商重点持续的性能优化</li></ul><h3 id="proxy-深度观测" tabindex="-1">Proxy 深度观测？ <a class="header-anchor" href="#proxy-深度观测" aria-label="Permalink to &quot;Proxy 深度观测？&quot;">​</a></h3><p>判断当前 Reflect.get 的返回值是否为 Object，如果是则再通过 reactive 方法做代理， 这样就实现了深度观测。</p><h3 id="如何防止数组触发多次-get-set-呢" tabindex="-1">如何防止数组触发多次 get/set 呢？ <a class="header-anchor" href="#如何防止数组触发多次-get-set-呢" aria-label="Permalink to &quot;如何防止数组触发多次 get/set 呢？&quot;">​</a></h3><p>判断 key 是否为当前被代理对象 target 自身属性，也可以判断旧值与新值是否相等， 只有满足以上两个条件之一时，才有可能执行 trigger。</p><h3 id="reactive-的局限性" tabindex="-1">reactive 的局限性? <a class="header-anchor" href="#reactive-的局限性" aria-label="Permalink to &quot;reactive 的局限性?&quot;">​</a></h3><ul><li><code>有限的值类型</code>：它只能用于对象类型</li><li><code>不能替换整个对象</code>：响应式跟踪是通过属性访问实现的</li><li><code>对解构操作不友好</code>：当我们将响应式对象的原始类型属性解构为本地变量时，或者将该属性传递给函数时，我们将丢失响应性连接</li></ul><h2 id="计算属性" tabindex="-1">计算属性 <a class="header-anchor" href="#计算属性" aria-label="Permalink to &quot;计算属性&quot;">​</a></h2><p>避免了在模板中写太多逻辑，Vue 的计算属性会自动追踪响应式依赖， 计算属性值会基于其响应式依赖被缓存。一个计算属性仅会在其响应式依赖更新时才重新计算。</p><div class="warning custom-block"><p class="custom-block-title">为什么需要缓存呢？</p><p>想象一下我们有一个非常耗性能的计算属性 list，需要循环一个巨大的数组并做许多计算逻辑，并且可能也有其他计算属性依赖于 list。没有缓存的话，我们会重复执行非常多次 list 的 getter，然而这实际上没有必要！如果你确定不需要缓存，那么也可以使用方法调用。</p></div><h2 id="vue2-中如何监测数组变化" tabindex="-1">Vue2 中如何监测数组变化 <a class="header-anchor" href="#vue2-中如何监测数组变化" aria-label="Permalink to &quot;Vue2 中如何监测数组变化&quot;">​</a></h2><p>使用了<code>函数劫持</code>的方式，<code>重写了数组的方法</code>。 Vue 将 data 中的数组进行了原型链重写，指向了自己定义的数组原型方法。 这样当调用数组 api 时，可以通知依赖更新。 如果数组中包含着引用类型，会对数组中的<code>引用类型再次递归遍历进行监控</code>。</p><h2 id="nexttick" tabindex="-1">nextTick <a class="header-anchor" href="#nexttick" aria-label="Permalink to &quot;nextTick&quot;">​</a></h2><p>在下次 DOM 更新循环结束之后执行延迟回调。 nextTick 主要使用了<code>宏任务</code>和<code>微任务</code>。根据执行环境分别尝试采用</p><ul><li>Promise</li><li>setImmediate</li><li>MessageChannel</li><li>如果以上都不行则采用 setTimeout</li></ul><h2 id="接口请求在哪个生命周期中" tabindex="-1">接口请求在哪个生命周期中? <a class="header-anchor" href="#接口请求在哪个生命周期中" aria-label="Permalink to &quot;接口请求在哪个生命周期中?&quot;">​</a></h2><p>接口请求一般放在 mounted 中，但需要注意的是服务端渲染时不支持 mounted，需要放到 created 中。</p><h2 id="computed-对比-watch" tabindex="-1">Computed 对比 Watch <a class="header-anchor" href="#computed-对比-watch" aria-label="Permalink to &quot;Computed 对比 Watch&quot;">​</a></h2><ul><li>共同点都是用来<code>监听数据的变化</code>。</li><li>不同点是否有<code>缓存</code>功能？ <ul><li>computed 是有缓存的，只有它依赖的<code>属性值改变</code>的时候，它才会进行计算。</li><li>watch 是没有缓存功能的，只要监听的<code>数据变化</code>了，它就会触发相应的操作。</li></ul></li><li>不同点是否支持<code>异步</code>？ <ul><li>computed 是不支持异步的，当 computed 内有异步操作的时候，它是监听不到数据变化的。</li><li>watch 是支持异步操作的，适合监听路由和设置计时器等。</li></ul></li></ul><h2 id="vue-渲染器的-diff-算法" tabindex="-1">Vue 渲染器的 diff 算法？ <a class="header-anchor" href="#vue-渲染器的-diff-算法" aria-label="Permalink to &quot;Vue 渲染器的 diff 算法？&quot;">​</a></h2><p>简单来说，diff 算法有以下过程</p><ul><li>同级比较，再比较子节点</li><li>先判断一方有子节点一方没有子节点的情况(如果新的 children 没有子节点，将旧的子节点移除)</li><li>比较都有子节点的情况(核心 diff)</li><li>递归比较子节点</li></ul><p>正常 Diff 两个树的时间复杂度是 O(n^3)，但实际情况下我们很少会进行跨层级的移动 DOM， 所以 Vue 将 Diff 进行了优化，从 O(n^3) -&gt; O(n)，只有当新旧 children 都为多个子节点时才需要用核心的 Diff 算法进行同层级比较。</p><h3 id="vue2-diff-双端比较的算法" tabindex="-1">Vue2-Diff 双端比较的算法 <a class="header-anchor" href="#vue2-diff-双端比较的算法" aria-label="Permalink to &quot;Vue2-Diff 双端比较的算法&quot;">​</a></h3><p>同时从新旧 children 的两端开始进行比较，借助 key 值找到可复用的节点，再进行相关操作。 相比 React 的 Diff 算法，同样情况下可以减少移动节点次数，减少不必要的性能损耗，更加的优雅。</p><h3 id="vue3-借鉴-ivi-算法和-inferno-算法" tabindex="-1">Vue3 借鉴 ivi 算法和 inferno 算法 <a class="header-anchor" href="#vue3-借鉴-ivi-算法和-inferno-算法" aria-label="Permalink to &quot;Vue3 借鉴 ivi 算法和 inferno 算法&quot;">​</a></h3><ul><li>diff 无 key 子节点</li><li>diff 有 key 子节点 <ul><li>起始位置节点类型相同。</li><li>结束位置节点类型相同。</li><li>相同部分处理完，有新增节点。</li><li>相同部分处理完，有旧节点需要卸载。</li><li>首尾相同，但中间部分存在可复用乱序节点。 <ul><li>diff 的核心逻辑在于通过新旧节点的位置变化构建一个最大递增子序列，最大子序列能保证通过最小的移动或者 patch 实现节点的复用。</li></ul></li></ul></li></ul><p>在创建 VNode 时就确定其类型，以及在 mount/patch 的过程中采用位运算来判断一个 VNode 的类型， 在这个基础之上再配合核心的 Diff 算法，使得性能上较 Vue2.x 有了提升。 该算法中还运用了动态规划的思想求解最大递增子序列。</p><blockquote><p>资料：<a href="https://zhuanlan.zhihu.com/p/459134214" target="_blank" rel="noreferrer">Vue3 diff 算法图解分析</a></p></blockquote>`,45),t=[n];function p(c,r,i,d,u,h){return s(),a("div",null,t)}const m=e(o,[["render",p]]);export{E as __pageData,m as default};
