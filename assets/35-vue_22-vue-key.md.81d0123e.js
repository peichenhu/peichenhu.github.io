import{_ as s,c as a,o as n,Q as e}from"./chunks/framework.03c6a765.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"35-vue/22-vue-key.md","filePath":"35-vue/22-vue-key.md","lastUpdated":1703663478000}'),l={name:"35-vue/22-vue-key.md"},t=e(`<h2 id="key" tabindex="-1">key <a class="header-anchor" href="#key" aria-label="Permalink to &quot;key&quot;">​</a></h2><p><a href="https://cn.vuejs.org/api/built-in-special-attributes.html#key" target="_blank" rel="noreferrer">key</a> 这个特殊的 attribute 主要作为 Vue 的虚拟 DOM 算法 (<code>dom-diff-by-key</code>) 提示，在比较新旧节点列表时用于识别 vnode。</p><h2 id="key-的预期值" tabindex="-1">key 的预期值 <a class="header-anchor" href="#key-的预期值" aria-label="Permalink to &quot;key 的预期值&quot;">​</a></h2><p>预期：<code>number | string | symbol</code>；同一个父元素下的子元素必须具有唯一的 key。重复的 key 将会导致渲染异常。</p><h2 id="没有-key-的情况" tabindex="-1">没有 key 的情况 <a class="header-anchor" href="#没有-key-的情况" aria-label="Permalink to &quot;没有 key 的情况&quot;">​</a></h2><p>在没有 key 的情况下，Vue 将使用一种最小化元素移动的算法，并尽可能地就地更新/复用相同类型的元素。 如果传了 key，则将根据 key 的变化顺序来重新排列元素，并且将始终移除/销毁 key 已经不存在的元素。</p><h2 id="用例" tabindex="-1">用例 <a class="header-anchor" href="#用例" aria-label="Permalink to &quot;用例&quot;">​</a></h2><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 与 v-for 结合： --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;...&lt;/li&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 也可以用于强制替换一个元素/组件而不是复用它。当你想这么做时它可能会很有用：--&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 当 text 变化时，&lt;span&gt; 总是会被替换而不是更新，因此 transition 将会被触发。 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">transition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;span :key=&quot;text&quot;&gt;{{ text }}&lt;/span&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 与 v-for 结合： --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;...&lt;/li&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 也可以用于强制替换一个元素/组件而不是复用它。当你想这么做时它可能会很有用：--&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 当 text 变化时，&lt;span&gt; 总是会被替换而不是更新，因此 transition 将会被触发。 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">transition</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;span :key=&quot;text&quot;&gt;{{ text }}&lt;/span&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">transition</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,8),p=[t];function o(r,i,c,y,u,d){return n(),a("div",null,p)}const k=s(l,[["render",o]]);export{b as __pageData,k as default};
