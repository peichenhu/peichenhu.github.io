import{_ as e,c as o,o as t,Q as c}from"./chunks/framework.03c6a765.js";const m=JSON.parse('{"title":"Vuex","description":"","frontmatter":{},"headers":[],"relativePath":"35-vue/70-vuex.md","filePath":"35-vue/70-vuex.md","lastUpdated":1703663478000}'),d={name:"35-vue/70-vuex.md"},a=c('<h1 id="vuex" tabindex="-1">Vuex <a class="header-anchor" href="#vuex" aria-label="Permalink to &quot;Vuex&quot;">​</a></h1><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 <code>store</code>（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p><ol><li>Vuex 的状态存储是响应式的。当 Vue 组件从 <code>store</code> 中读取状态的时候，若 <code>store</code> 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li><li>改变 <code>store</code> 中的状态的唯一途径就是显式地提交 <code>(commit) mutation</code>。这样使得我们可以方便地跟踪每一个状态的变化。</li></ol><p>包括以下模块：</p><ul><li><code>State</code>：定义了应用状态的数据结构，可以在这里设置默认的初始状态。</li><li><code>Getter</code>：允许组件从 Store 中获取数据，<code>mapGetters</code> 辅助函数仅仅是将 <code>store</code> 中的 <code>getter</code> 映射到局部计算属性。</li><li><code>Mutation</code>：是唯一更改 <code>store</code> 中状态的方法，且必须是同步函数。</li><li><code>Action</code>：用于提交 <code>mutation</code>，而不是直接变更状态，可以包含任意异步操作。</li><li><code>Module</code>：允许将单一的 Store 拆分为多个 <code>store</code> 且同时保存在单一的状态树中。</li></ul>',5),r=[a];function i(s,l,u,_,n,p){return t(),o("div",null,r)}const V=e(d,[["render",i]]);export{m as __pageData,V as default};
